######################################################
p <- ggplot(iris_data,aes(x=Sepal.Length,y=Sepal.Width))
p + geom_point(aes(colour=factor(Species)))
######################################################
## Question 2: Calculate mean and standard deviation for 'setosa' species
######################################################
setosa_only <- subset(iris_data, Species=="setosa")
setosa_mean <- mean(setosa_only$Sepal.Length)
setosa_sd <- sd(setosa_only$Sepal.Length)
######################################################
## Question 3: Plot a density distribution
######################################################
set.seed(100)
x_norm <- c(rnorm(1000, mean = setosa_mean, sd=setosa_sd))
plot(density(x_norm),main="")
lines(density(setosa_only$Sepal.Length),main="",xlab="",ylab="")
title("Setosa Sepal Length")
xlab("Sepal Length")
ylab("Density")
library(ggplot2)
######################################################
## Load the data
######################################################
iris_data <- read.csv("data/lab2_data.csv",sep=",")
######################################################
## Question 1: Use ggplot to plot X = Sepal.Length, y = Sepal.Width
## geom_point colored based on species
######################################################
p <- ggplot(iris_data,aes(x=Sepal.Length,y=Sepal.Width))
p + geom_point(aes(colour=factor(Species)))
######################################################
## Question 2: Calculate mean and standard deviation for 'setosa' species
######################################################
setosa_only <- subset(iris_data, Species=="setosa")
setosa_mean <- mean(setosa_only$Sepal.Length)
setosa_sd <- sd(setosa_only$Sepal.Length)
######################################################
## Question 3: Plot a density distribution
######################################################
set.seed(100)
x_norm <- c(rnorm(1000, mean = setosa_mean, sd=setosa_sd))
plot(density(x_norm),main="")
title("Setosa Sepal Length")
xlab("Sepal Length")
ylab("Density")
lines(density(setosa_only$Sepal.Length),main="",xlab="",ylab="")
install.packages("ggplot2")
install.packages("gapminder")
install.packages("scales")
install.packages("car")
setwd("~/GitHub/dataviz-forum/exercise_guns")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(gunsales)
gun_sales <- analysis()
str(gun_sales[,1:12])
# Chunk 3
plot_gunsales(gun_sales)
`Yes %` = 4, No = 5, `No %` = 6) %>%
mutate_each(funs(parse_num), -State)
head(gun_ownership)
# Chunk 5
gun_ownership = gun_ownership %>%
mutate(`Child access prevention` = grepl('\\*$', State),
State  = sub('\\*$', '', State))
# Fix D.C. name
gun_ownership[gun_ownership$State == 'The District', 'State'] = 'District of Columbia'
# Chunk 6
# Website appears to block scraping, but allows downloading data.
# gun_deaths_url = 'http://kff.org/other/state-indicator/firearms-death-rate-per-100000/'
# gun_deaths = readHTMLTable(gun_deaths_url)
# Instead, we use the manually downloaded CSV output.
gun_deaths = read.csv("exercise/KFF_deaths_firearms.csv", skip = 3) %>%
select(State = 1, `Deaths per 100000` = 2)
head(gun_deaths)
# Chunk 7
library(readr)
gun_inddeaths <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/guns-data/master/full_data.csv")
gun_inddeaths <- gun_inddeaths[,2:dim(gun_inddeaths)[2]]
head(gun_inddeaths)
# Chunk 8
deaths_ownership<-cbind(gun_deaths[2:52,],ownership= gun_ownership[2:52,]$'Yes %')
colnames(deaths_ownership)[2]<-"death_rate"
library(ggplot2)
ggplot(deaths_ownership,aes(ownership,death_rate,label=State))+
geom_point(data=deaths_ownership) +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1) +
labs(title="Deaths Rate vs. Gun Ownership",
y="Deaths per 100000",
x="Gun Ownership")
# Chunk 9
library(scales)
# A bit messy way to format time
gun_sales$formatted_date<-as.Date(strptime(paste0(gun_sales$year,'-',gun_sales$month,'-01'),format="%Y-%m-%d"))
# Plot with scale_x_date, which prevents ggplot from trying to display all the dates
ggplot(gun_sales,
aes(formatted_date,guns_total_per_1000)) +
geom_point(data=gun_sales) +
labs(title="Gun sales over time",
y="Gun Sales per 1000",
x="Date") +
scale_x_date(labels = date_format("%Y-%m"))
# Chunk 10
# A bit messy way to format time
gun_inddeaths$formatted_date<-as.Date(strptime(paste0(gun_inddeaths$year,'-',gun_inddeaths$month,'-01'),format="%Y-%m-%d"))
# Chunk 11
gun_inddeaths %>%
na.omit() %>%
ggplot(aes(intent,fill=intent)) +
geom_bar(stat="count")+
theme( legend.position="none")+
labs(title="Gun deaths, by intent")
# Chunk 12
gun_inddeaths %>%
na.omit() %>%
ggplot(aes(race,fill=race)) +
geom_bar(stat="count")+
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1), legend.position="none")+
labs(title="Gun deaths, by Race")
# Chunk 13
gun_inddeaths %>%
na.omit() %>%
ggplot(aes(place,fill=place)) +
geom_bar(stat="count")+
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1), legend.position="none")+
labs(title="Gun deaths, by Place")
# Chunk 14
deaths_regulations<-cbind(gun_deaths[2:52,],child_regulation=gun_ownership[2:52,c(7)])
colnames(deaths_regulations)[2]<-"death_rate"
ggplot(deaths_regulations,aes(child_regulation,death_rate,colour=child_regulation)) +
geom_boxplot() +
labs(title="Gun regulation and death rates",
y="Deaths per 100,000",
x="Child Regulation in state")+
theme( legend.position="none")+
scale_x_discrete(labels=c("No","Yes"))
# Chunk 15
gun_inddeaths %>%
filter(intent=="Suicide") %>%
filter(age<18) %>%
group_by(date=formatted_date) %>%
summarize(counts=n()) %>%
ggplot(aes(x=date,
y=counts)) +
geom_line() +
labs(title="Gun Suicides of Non-adults over time (2012-2015)",
y="Deaths",
x="Date")
# Chunk 16
pop_death<-cbind(gun_deaths[2:52,],population[2:52],pop_density[2:52,c(1,12,23)],child_regulation=gun_ownership[2:52,c(7)])
pop_death<-droplevels(pop_death)
pop_death$X2010_DENSITY<-as.numeric(gsub(",","",levels(pop_death$X2010_DENSITY)[pop_death$X2010_DENSITY]))
pop_death
names(pop_death)[2]<-"death_rate"
ggplot(pop_death[-9,],aes(X2010_DENSITY,
death_rate,
label=State,
colour=child_regulation)) +
geom_point() +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1)+
scale_x_reverse( lim=c(1300,0))
# Chunk 17
ggplot(pop_death[-9,],aes(X2010_DENSITY,
death_rate,
label=State,
colour=child_regulation)) +
geom_point() +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1)+
scale_x_reverse( lim=c(1300,0))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(gunsales)
gun_sales <- analysis()
str(gun_sales[,1:12])
# Chunk 3
plot_gunsales(gun_sales)
`Yes %` = 4, No = 5, `No %` = 6) %>%
mutate_each(funs(parse_num), -State)
head(gun_ownership)
# Chunk 5
gun_ownership = gun_ownership %>%
mutate(`Child access prevention` = grepl('\\*$', State),
State  = sub('\\*$', '', State))
# Fix D.C. name
gun_ownership[gun_ownership$State == 'The District', 'State'] = 'District of Columbia'
# Chunk 6
# Website appears to block scraping, but allows downloading data.
# gun_deaths_url = 'http://kff.org/other/state-indicator/firearms-death-rate-per-100000/'
# gun_deaths = readHTMLTable(gun_deaths_url)
# Instead, we use the manually downloaded CSV output.
gun_deaths = read.csv("exercise/KFF_deaths_firearms.csv", skip = 3) %>%
select(State = 1, `Deaths per 100000` = 2)
head(gun_deaths)
# Chunk 7
library(readr)
gun_inddeaths <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/guns-data/master/full_data.csv")
gun_inddeaths <- gun_inddeaths[,2:dim(gun_inddeaths)[2]]
head(gun_inddeaths)
# Chunk 8
deaths_ownership<-cbind(gun_deaths[2:52,],ownership= gun_ownership[2:52,]$'Yes %')
colnames(deaths_ownership)[2]<-"death_rate"
library(ggplot2)
ggplot(deaths_ownership,aes(ownership,death_rate,label=State))+
geom_point(data=deaths_ownership) +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1) +
labs(title="Deaths Rate vs. Gun Ownership",
y="Deaths per 100000",
x="Gun Ownership")
# Chunk 9
library(scales)
# A bit messy way to format time
gun_sales$formatted_date<-as.Date(strptime(paste0(gun_sales$year,'-',gun_sales$month,'-01'),format="%Y-%m-%d"))
# Plot with scale_x_date, which prevents ggplot from trying to display all the dates
ggplot(gun_sales,
aes(formatted_date,guns_total_per_1000)) +
geom_point(data=gun_sales) +
labs(title="Gun sales over time",
y="Gun Sales per 1000",
x="Date") +
scale_x_date(labels = date_format("%Y-%m"))
# Chunk 10
# A bit messy way to format time
gun_inddeaths$formatted_date<-as.Date(strptime(paste0(gun_inddeaths$year,'-',gun_inddeaths$month,'-01'),format="%Y-%m-%d"))
# Chunk 11
gun_inddeaths %>%
na.omit() %>%
ggplot(aes(intent,fill=intent)) +
geom_bar(stat="count")+
theme( legend.position="none")+
labs(title="Gun deaths, by intent")
# Chunk 12
gun_inddeaths %>%
na.omit() %>%
ggplot(aes(race,fill=race)) +
geom_bar(stat="count")+
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1), legend.position="none")+
labs(title="Gun deaths, by Race")
# Chunk 13
gun_inddeaths %>%
na.omit() %>%
ggplot(aes(place,fill=place)) +
geom_bar(stat="count")+
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1), legend.position="none")+
labs(title="Gun deaths, by Place")
# Chunk 14
deaths_regulations<-cbind(gun_deaths[2:52,],child_regulation=gun_ownership[2:52,c(7)])
colnames(deaths_regulations)[2]<-"death_rate"
ggplot(deaths_regulations,aes(child_regulation,death_rate,colour=child_regulation)) +
geom_boxplot() +
labs(title="Gun regulation and death rates",
y="Deaths per 100,000",
x="Child Regulation in state")+
theme( legend.position="none")+
scale_x_discrete(labels=c("No","Yes"))
# Chunk 15
gun_inddeaths %>%
filter(intent=="Suicide") %>%
filter(age<18) %>%
group_by(date=formatted_date) %>%
summarize(counts=n()) %>%
ggplot(aes(x=date,
y=counts)) +
geom_line() +
labs(title="Gun Suicides of Non-adults over time (2012-2015)",
y="Deaths",
x="Date")
# Chunk 16
pop_death<-cbind(gun_deaths[2:52,],population[2:52],pop_density[2:52,c(1,12,23)],child_regulation=gun_ownership[2:52,c(7)])
pop_death<-droplevels(pop_death)
pop_death$X2010_DENSITY<-as.numeric(gsub(",","",levels(pop_death$X2010_DENSITY)[pop_death$X2010_DENSITY]))
pop_death
names(pop_death)[2]<-"death_rate"
ggplot(pop_death[-9,],aes(X2010_DENSITY,
death_rate,
label=State,
colour=child_regulation)) +
geom_point() +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1)+
scale_x_reverse( lim=c(1300,0))
# Chunk 17
ggplot(pop_death[-9,],aes(X2010_DENSITY,
death_rate,
label=State,
colour=child_regulation)) +
geom_point() +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1)+
scale_x_reverse( lim=c(1300,0))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(gunsales)
gun_sales <- analysis()
str(gun_sales[,1:12])
# Chunk 3
#plot_gunsales(gun_sales)
#ggplot_gunsales(gun_sales)
# Chunk 4
library(XML)
library(dplyr)
gun_ownership_url = 'http://www.washingtonpost.com/wp-srv/health/interactives/guns/ownership.html'
gun_ownership = readHTMLTable(gun_ownership_url, header = TRUE, which = 1)
gun_ownership = gun_ownership[-1, ]
parse_num = function (x) as.numeric(sub(',', '', x))
gun_ownership = select(gun_ownership, State = 1, Total = 2, Yes = 3,
`Yes %` = 4, No = 5, `No %` = 6) %>%
mutate_each(funs(parse_num), -State)
head(gun_ownership)
# Chunk 5
gun_ownership = gun_ownership %>%
mutate(`Child access prevention` = grepl('\\*$', State),
State  = sub('\\*$', '', State))
# Fix D.C. name
gun_ownership[gun_ownership$State == 'The District', 'State'] = 'District of Columbia'
# Chunk 6
# Website appears to block scraping, but allows downloading data.
# gun_deaths_url = 'http://kff.org/other/state-indicator/firearms-death-rate-per-100000/'
# gun_deaths = readHTMLTable(gun_deaths_url)
# Instead, we use the manually downloaded CSV output.
gun_deaths = read.csv("exercise/KFF_deaths_firearms.csv", skip = 3) %>%
select(State = 1, `Deaths per 100000` = 2)
head(gun_deaths)
# Chunk 7
library(readr)
gun_inddeaths <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/guns-data/master/full_data.csv")
gun_inddeaths <- gun_inddeaths[,2:dim(gun_inddeaths)[2]]
head(gun_inddeaths)
# Chunk 8
deaths_ownership<-cbind(gun_deaths[2:52,],ownership= gun_ownership[2:52,]$'Yes %')
colnames(deaths_ownership)[2]<-"death_rate"
library(ggplot2)
ggplot(deaths_ownership,aes(ownership,death_rate,label=State))+
geom_point(data=deaths_ownership) +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1) +
labs(title="Deaths Rate vs. Gun Ownership",
y="Deaths per 100000",
x="Gun Ownership")
# Chunk 9
library(scales)
# A bit messy way to format time
gun_sales$formatted_date<-as.Date(strptime(paste0(gun_sales$year,'-',gun_sales$month,'-01'),format="%Y-%m-%d"))
# Plot with scale_x_date, which prevents ggplot from trying to display all the dates
ggplot(gun_sales,
aes(formatted_date,guns_total_per_1000)) +
geom_point(data=gun_sales) +
labs(title="Gun sales over time",
y="Gun Sales per 1000",
x="Date") +
scale_x_date(labels = date_format("%Y-%m"))
# Chunk 10
# A bit messy way to format time
gun_inddeaths$formatted_date<-as.Date(strptime(paste0(gun_inddeaths$year,'-',gun_inddeaths$month,'-01'),format="%Y-%m-%d"))
# Chunk 11
gun_inddeaths %>%
na.omit() %>%
ggplot(aes(intent,fill=intent)) +
geom_bar(stat="count")+
theme( legend.position="none")+
labs(title="Gun deaths, by intent")
# Chunk 12
gun_inddeaths %>%
na.omit() %>%
ggplot(aes(race,fill=race)) +
geom_bar(stat="count")+
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1), legend.position="none")+
labs(title="Gun deaths, by Race")
# Chunk 13
gun_inddeaths %>%
na.omit() %>%
ggplot(aes(place,fill=place)) +
geom_bar(stat="count")+
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1), legend.position="none")+
labs(title="Gun deaths, by Place")
# Chunk 14
deaths_regulations<-cbind(gun_deaths[2:52,],child_regulation=gun_ownership[2:52,c(7)])
colnames(deaths_regulations)[2]<-"death_rate"
ggplot(deaths_regulations,aes(child_regulation,death_rate,colour=child_regulation)) +
geom_boxplot() +
labs(title="Gun regulation and death rates",
y="Deaths per 100,000",
x="Child Regulation in state")+
theme( legend.position="none")+
scale_x_discrete(labels=c("No","Yes"))
# Chunk 15
gun_inddeaths %>%
filter(intent=="Suicide") %>%
filter(age<18) %>%
group_by(date=formatted_date) %>%
summarize(counts=n()) %>%
ggplot(aes(x=date,
y=counts)) +
geom_line() +
labs(title="Gun Suicides of Non-adults over time (2012-2015)",
y="Deaths",
x="Date")
# Chunk 16
pop_death<-cbind(gun_deaths[2:52,],population[2:52],pop_density[2:52,c(1,12,23)],child_regulation=gun_ownership[2:52,c(7)])
pop_death<-droplevels(pop_death)
pop_death$X2010_DENSITY<-as.numeric(gsub(",","",levels(pop_death$X2010_DENSITY)[pop_death$X2010_DENSITY]))
pop_death
names(pop_death)[2]<-"death_rate"
ggplot(pop_death[-9,],aes(X2010_DENSITY,
death_rate,
label=State,
colour=child_regulation)) +
geom_point() +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1)+
scale_x_reverse( lim=c(1300,0))
# Chunk 17
ggplot(pop_death[-9,],aes(X2010_DENSITY,
death_rate,
label=State,
colour=child_regulation)) +
geom_point() +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1)+
scale_x_reverse( lim=c(1300,0))
population<-read.csv('pop_density.csv')
population
?read.csv
pop_density<-read.csv('pop_density.csv')
pop_density[2:52,c(1,12,23)]
pop_density<-read.csv('pop_density.csv',skip=2)
pop_density[2:52,c(1,12,23)]
pop_density<-read.csv('pop_density.csv',skip=2,header=TRUE)
pop_density[2:52,c(1,12,23)]
pop_density<-read.csv('pop_density.csv',skip=3,header=TRUE)
pop_density[2:52,c(1,12,23)]
population<-pop_density[2:52,c(12)]
population
pop_death<-cbind(gun_deaths[2:52,],population[2:52],pop_density[2:52,c(1,12,23)],child_regulation=gun_ownership[2:52,c(7)])
pop_death
pop_death<-cbind(gun_deaths[2:52,],population[2:52],population=pop_density[2:52,c(1,12,23)],child_regulation=gun_ownership[2:52,c(7)])
pop_death
population
pop_density[2:52,c(12)]
pop_death
pop_density
pop_density<-read.csv('pop_density.csv',skip=3,header=TRUE)
population<-pop_density[2:52,c(12)]
pop_death<-cbind(gun_deaths[2:52,],population[2:52],population=pop_density[2:52,c(1,12,23)],child_regulation=gun_ownership[2:52,c(7)])
pop_death
ggplot(pop_death[-9,],aes(X2010_DENSITY,
pop_density<-read.csv('pop_density.csv',skip=3,header=TRUE)
population<-pop_density[2:52,c(12)]
pop_death<-cbind(gun_deaths[2:52,],pop_density[2:52,c(1,12,23)],child_regulation=gun_ownership[2:52,c(7)])
pop_death<-droplevels(pop_death)
pop_death$X2010_DENSITY<-as.numeric(gsub(",","",levels(pop_death$X2010_DENSITY)[pop_death$X2010_DENSITY]))
pop_death
names(pop_death)[2]<-"death_rate"
ggplot(pop_death[-9,],aes(X2010_DENSITY,
death_rate,
label=State,
colour=child_regulation)) +
geom_point() +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1)+
scale_x_reverse( lim=c(1300,0))
death_rate,
```{r}
ggplot(pop_death[-9,],aes(X2010_DENSITY,
death_rate,
label=State,
colour=child_regulation)) +
geom_point() +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1)+
scale_x_reverse( lim=c(1300,0))
```
pop_death
str(pop_death)
ggplot(pop_death[-9,],aes(X2010_DENSITY,
death_rate,
label=State,
colour=child_regulation)) +
geom_point() +
geom_text(size=3,
vjust = 0,
nudge_y = 0.2,
nudge_x = 0.1)+
scale_x_reverse( lim=c(1300,0))
